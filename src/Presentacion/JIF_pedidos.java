/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Logica.ControladorVentas;
import Logica.fabricaElGuardian;
import Logica.producto;
import Logica.proveedor;
import Logica.utilidades;
import com.google.common.eventbus.DeadEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author jp
 */
public class JIF_pedidos extends javax.swing.JInternalFrame {

    utilidades util = utilidades.getInstance();
    ControladorVentas contV = (ControladorVentas) fabricaElGuardian.getInstance().getInstanceIControladorVentas();
    JDesktopPane escritorio = null;
    private Long idProveedor = null;
    private List<Long> idsProductos = new ArrayList<>();
    private Long idproductoTablaPedido = null;

    /**
     * Creates new form JIF_pedidos
     */
    public JIF_pedidos(JDesktopPane escritorioV) {
        this.escritorio = escritorioV;
        initComponents();
        cargarProveedores();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtablaProveedores = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtableProductos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtableProductosAPedir = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lb_proveedor = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        btn_pedir = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        btn_quitar = new javax.swing.JButton();

        jtablaProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID Proveedor", "Nombre"
            }
        ));
        jtablaProveedores.setColumnSelectionAllowed(true);
        jtablaProveedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtablaProveedoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtablaProveedores);
        jtablaProveedores.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jtableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID Producto", "Nombre "
            }
        ));
        jtableProductos.setColumnSelectionAllowed(true);
        jtableProductos.getTableHeader().setReorderingAllowed(false);
        jtableProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtableProductosMouseClicked(evt);
            }
        });
        jtableProductos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtableProductosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jtableProductos);
        jtableProductos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jtableProductosAPedir.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID Producto", "Nombre ", "Cantidad"
            }
        ));
        jtableProductosAPedir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtableProductosAPedirMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtableProductosAPedir);
        if (jtableProductosAPedir.getColumnModel().getColumnCount() > 0) {
            jtableProductosAPedir.getColumnModel().getColumn(2).setResizable(false);
            jtableProductosAPedir.getColumnModel().getColumn(2).setHeaderValue("Cantidad");
        }

        jLabel1.setText("Proveedor");

        jLabel2.setText("Productos");

        jLabel3.setText("Producto a pedir");

        lb_proveedor.setText("ID");

        jSeparator1.setForeground(new java.awt.Color(255, 255, 255));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel4.setText(">>");

        btn_pedir.setText("Realizar Pedido");
        btn_pedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pedirActionPerformed(evt);
            }
        });

        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_quitar.setText("Quitar");
        btn_quitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_quitarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(37, 37, 37)
                        .addComponent(lb_proveedor))
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addContainerGap(278, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(btn_quitar)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_pedir)
                        .addGap(35, 35, 35)
                        .addComponent(btn_cancelar)
                        .addGap(26, 26, 26))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lb_proveedor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(279, 279, 279))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_quitar))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_pedir)
                            .addComponent(btn_cancelar))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtablaProveedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtablaProveedoresMouseClicked
        int rowAtPoint = jtablaProveedores.rowAtPoint(evt.getPoint()); // TODO add your handling code here:
        this.idProveedor = (Long) jtablaProveedores.getValueAt(rowAtPoint, 0);
        lb_proveedor.setText(String.valueOf(this.idProveedor));
        reiniciarTablas();
        cargarProductos(this.idProveedor);

    }//GEN-LAST:event_jtablaProveedoresMouseClicked

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        limpiar();
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void jtableProductosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtableProductosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtableProductosKeyPressed

    private void jtableProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtableProductosMouseClicked
        int rowAtPoint = jtableProductos.rowAtPoint(evt.getPoint()); // TODO add your handling code here:
        agregarProductoAPedido((Long) jtableProductos.getValueAt(rowAtPoint, 0));
    }//GEN-LAST:event_jtableProductosMouseClicked

    private void btn_pedirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pedirActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Desea realizar un pedido de los productos seleccionados?") == 0) {
            pedir();
        }
    }//GEN-LAST:event_btn_pedirActionPerformed

    private void jtableProductosAPedirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtableProductosAPedirMouseClicked
        int row = jtableProductosAPedir.rowAtPoint(evt.getPoint());
        this.idproductoTablaPedido = (Long) this.jtableProductosAPedir.getValueAt(row, 0);
        //  eliminarItemLista();
// TODO add your handling code here:
    }//GEN-LAST:event_jtableProductosAPedirMouseClicked

    private void btn_quitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_quitarActionPerformed
        eliminarItemLista();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_quitarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_pedir;
    private javax.swing.JButton btn_quitar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jtablaProveedores;
    private javax.swing.JTable jtableProductos;
    private javax.swing.JTable jtableProductosAPedir;
    private javax.swing.JLabel lb_proveedor;
    // End of variables declaration//GEN-END:variables

    private void cargarProveedores() {
        List<proveedor> proveedores = (List<proveedor>) contV.getProveedores();
        String[] cabeceras = {"ID Proveedor", "Nombre"};
        DefaultTableModel modelo = new DefaultTableModel(cabeceras, 0);
        if (proveedores.size() > 0) {
            for (proveedor p : proveedores) {
                Object[] data = {p.getId(), p.getNombreProveedor()};
                modelo.addRow(data);
            }
            jtablaProveedores.setModel(modelo);
            jtablaProveedores.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "No hay proveedores!");
            jtablaProveedores.setModel(modelo);
            jtablaProveedores.setEnabled(false);
        }

    }

    private void cargarProductos(Long idProveedor) {
        List<producto> productos = contV.getProductosXproveedor(idProveedor);
        String[] cabeceras = {"ID Producto", "Nombre"};
        DefaultTableModel modelo = new DefaultTableModel(cabeceras, 0);
        if (productos.size() > 0) {
            for (producto p : productos) {
                Object[] data = {p.getCodigo(), p.getNombre()};
                modelo.addRow(data);
            }
            jtableProductos.setModel(modelo);
            jtableProductos.setEnabled(true);
        } else {
            jtableProductos.setModel(modelo);
            JOptionPane.showMessageDialog(this, "El proveedor seleccionado no tiene productos!");
            jtableProductos.setEnabled(false);
        }

    }

    private void reiniciarTablas() {
        String[] cab1 = {"ID Producto", "Nombre"};
        DefaultTableModel nuevoMod1 = new DefaultTableModel(cab1, 0);
        jtableProductos.setModel(nuevoMod1);
        String[] cab2 = {"ID Producto", "Nombre", "Cantidad"};
        DefaultTableModel nuevoMod2 = new DefaultTableModel(cab2, 0);
        jtableProductosAPedir.setModel(nuevoMod2);
    }

    private void agregarProductoAPedido(Long aLong) {
        producto p = (producto) contV.getProducto(aLong);
        Object[] data = {p.getCodigo(), p.getNombre(), 0};
        DefaultTableModel model = (DefaultTableModel) jtableProductosAPedir.getModel();
        model.addRow(data);
    }

    private boolean validaCantidad() {
        DefaultTableModel modeloT = (DefaultTableModel) jtableProductosAPedir.getModel();
        Vector dataVector = modeloT.getDataVector();
        if (dataVector.size() > 0) {
            for (Object v : dataVector) {
                String valor = (String) ((Vector) v).elementAt(2);
               int cant=Integer.parseInt(valor);
                if (cant <= 0) {
                    return false;
                }
            }
        }
        return true;
    }

    private String armarPedido() {
        String cuerpo = "A quien corresponda\n En el dia de la fecha: "
                + util.getFechaActualParseoformato("yyyy-MM-dd")
                + "\n" + "Quiero solicitar un pedido:\n";
        DefaultTableModel modeloT = (DefaultTableModel) jtableProductosAPedir.getModel();
        Vector dataVector = modeloT.getDataVector();
        this.idsProductos = new ArrayList<>();
        for (Object v : dataVector) {
            String cadena = "Producto: " + ((Vector) v).elementAt(1).toString() + " Cantidad: " + ((Vector) v).elementAt(2).toString() + "\n";
            this.idsProductos.add((Long) ((Vector) v).elementAt(0));
            cuerpo += cadena;
        }
        return cuerpo;
    }

    private void pedir() {
        if (validaCantidad()) {
            String cuerpo = armarPedido();
            String correo = contV.getProveedor(this.idProveedor).getCorreo();
            contV.setearEstadoProductos(idsProductos, 3);
            JIF_enviarCorreo nuevoCorreo = new JIF_enviarCorreo(cuerpo, correo);
        //    nuevoCorreo.recibePedido(cuerpo, correo);
            this.escritorio.add(nuevoCorreo);
            nuevoCorreo.setVisible(true);
            limpiar();
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar una cantidad valida en todos los productos seleccionados!");
            jtableProductosAPedir.requestFocus();
        }
    }

    private void limpiar() {
        lb_proveedor.setText("ID");
        reiniciarTablas();
        this.idProveedor = null;
    }

    private void eliminarItemLista() {
        if (idproductoTablaPedido != null) {
            if (JOptionPane.showConfirmDialog(this, "Desea remover el producto: " + idproductoTablaPedido.toString() + " de la lista de compra?") == 0) {
                int fila = getPosicionProdLista(idproductoTablaPedido);
                eliminarFila(fila);
                //  this.productosEnVenta.remove(idProductoListaVenta);
                JOptionPane.showMessageDialog(this, "Se elimino de la lista!");
                //  calcularPrecioTotal();
                idproductoTablaPedido = null;
            } else {
                idproductoTablaPedido = null;
            }
        }
    }

    private int getPosicionProdLista(long id) {
        DefaultTableModel modeloSet = (DefaultTableModel) jtableProductosAPedir.getModel();
        Vector dataVector = modeloSet.getDataVector();
        for (int i = 0; i < dataVector.size(); i++) {
            Vector elementoVector = (Vector) dataVector.elementAt(i);
            if (estaEnEstaPosicion(elementoVector, id)) {
                return i;
            }

        }
        return 0;
    }

    private void eliminarFila(int indice) {
        DefaultTableModel modeloMod = (DefaultTableModel) jtableProductosAPedir.getModel();
        modeloMod.removeRow(indice);

    }

    private boolean estaEnEstaPosicion(Vector elementoVector, long id) {
        return ((Long) elementoVector.elementAt(0)).equals(id);
    }
}
