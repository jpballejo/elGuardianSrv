/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Logica.ControladorVentas;
import Logica.cliente;
import Logica.controladorCliente;
import Logica.detalleVenta;
import Logica.fabricaElGuardian;
import Logica.iControladorCliente;
import Logica.iControladorVentas;
import Logica.producto;
import Logica.utilidades;
import Logica.venta;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gabri
 */
public class AltaVenta extends javax.swing.JInternalFrame {

    ControladorVentas ICV = (ControladorVentas) fabricaElGuardian.getInstance().getInstanceIControladorVentas();
    controladorCliente ICC = (controladorCliente) fabricaElGuardian.getInstance().getInstanceIControladorCliente();
    private HashMap<String, cliente> clientes = null;
    private HashMap<Long, producto> productosDisponibles = null;
    private HashMap<Long, producto> productosEnVenta = new HashMap<>();
    HashMap<Long, Integer> productoYcantidad = null;
    private Long idProductoListaVenta = null;
    utilidades util = utilidades.getInstance();
    /**
     * Creates new form AltaVenta
     */
    int altura = 100;
    int panel = 2;

    int contador = 0;

    public AltaVenta() {
        initComponents();
        reiniciarTablaProdVenta();
        cargarComboClientes();
    }

    private void reiniciarTablaProdVenta() {
        String[] cabeceras = {"ID Producto", "Nombre", "Precio", "Cantidad"};
        DefaultTableModel nuevoModelo = new DefaultTableModel(cabeceras, 0);
        jtabla_productosVenta.setModel(nuevoModelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtabla_productos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jtxt_buscar = new javax.swing.JTextField();
        btn_aceptar = new javax.swing.JButton();
        btn_cancelar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtabla_productosVenta = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        JCB_Cliente = new javax.swing.JComboBox<>();
        lb_precio = new javax.swing.JLabel();
        btn_eliminarProducto = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jtabla_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtabla_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtabla_productosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtabla_productos);

        jLabel1.setText("Buscar");

        btn_aceptar.setText("Aceptar");
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel2.setText(">>");

        jtabla_productosVenta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtabla_productosVenta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtabla_productosVentaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtabla_productosVenta);

        jLabel3.setText("Precio Total");

        jLabel4.setText("Cliente");

        JCB_Cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lb_precio.setText("Precio");

        btn_eliminarProducto.setText("Eliminar Producto");
        btn_eliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarProductoActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(238, 238, 238));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxt_buscar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(35, 35, 35)
                                .addComponent(JCB_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(48, 48, 48)
                                .addComponent(lb_precio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_eliminarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 682, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_aceptar)
                                .addGap(61, 61, 61)
                                .addComponent(btn_cancelar)
                                .addGap(49, 49, 49)))))
                .addGap(79, 79, 79))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxt_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(JCB_Cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(164, 164, 164)
                                .addComponent(jLabel2)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(lb_precio)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btn_eliminarProducto))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_aceptar)
                    .addComponent(btn_cancelar))
                .addContainerGap(18, Short.MAX_VALUE))
            .addComponent(jSeparator1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void jtabla_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtabla_productosMouseClicked
        int rowAtPoint = jtabla_productos.rowAtPoint(evt.getPoint());
        seleccionarProducto((Long) jtabla_productos.getValueAt(rowAtPoint, 0)); // TODO add your handling code here:
    }//GEN-LAST:event_jtabla_productosMouseClicked

    private void btn_eliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarProductoActionPerformed
        eliminarItemLista();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_eliminarProductoActionPerformed

    private void jtabla_productosVentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtabla_productosVentaMouseClicked
        int rowAtPoint = jtabla_productosVenta.rowAtPoint(evt.getPoint());
        idProductoListaVenta = (Long) jtabla_productosVenta.getValueAt(rowAtPoint, 0);
    }//GEN-LAST:event_jtabla_productosVentaMouseClicked

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
        vender();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_aceptarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JCB_Cliente;
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_eliminarProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jtabla_productos;
    private javax.swing.JTable jtabla_productosVenta;
    private javax.swing.JTextField jtxt_buscar;
    private javax.swing.JLabel lb_precio;
    // End of variables declaration//GEN-END:variables

    private void cargarComboClientes() {
        List<cliente> clientes = (List<cliente>) this.ICC.getClientes();
        JComboBox<String> comboNuevo = new JComboBox<>();
        if (clientes.size() > 0) {
            comboNuevo.addItem("Seleccionar un Cliente");
            this.clientes = new HashMap<>();//cada ves que lo cargo lo inicializo entonces es vacio
            for (cliente c : clientes) {
                String nuevoValor = getContador() + " Cliente: " + c.getNombre() + " " + c.getApellido() + " Email: " + c.getCorreo();
                comboNuevo.addItem(nuevoValor);
                this.clientes.put(nuevoValor, c);
            }
        } else {
            comboNuevo.addItem("No hay Clientes!");
        }
        JCB_Cliente = comboNuevo;
    }

    private int getContador() {
        return this.contador++;
    }

    private void seleccionarProducto(Long id) {
        producto p = getProducto(id);
        if (p != null) {
            DefaultTableModel modeloSet = (DefaultTableModel) jtabla_productosVenta.getModel();
            Object[] data = {p.getCodigo(), p.getNombre(), p.getPrecio()};
            this.productosEnVenta.put(p.getCodigo(), p);
            modeloSet.addRow(data);
            calcularPrecioTotal();
        }
    }

    private int getPosicionProdLista(long id) {
        DefaultTableModel modeloSet = (DefaultTableModel) jtabla_productosVenta.getModel();
        Vector dataVector = modeloSet.getDataVector();
        for (int i = 0; i < dataVector.size(); i++) {
            Vector elementoVector = (Vector) dataVector.elementAt(i);
            if (estaEnEstaPosicion(elementoVector, id)) {
                return i;
            }

        }
        return 0;
    }

    private void eliminarFila(int indice) {
        DefaultTableModel modeloMod = (DefaultTableModel) jtabla_productosVenta.getModel();
        modeloMod.removeRow(indice);

    }

    private void calcularPrecioTotal() {
        DefaultTableModel modelCal = (DefaultTableModel) jtabla_productosVenta.getModel();
        float precioTotal = 0;
        Vector dataVector = modelCal.getDataVector();
        this.productoYcantidad = new HashMap<>();
        for (Object v : dataVector) {
            Long idProdV = (Long) ((Vector) v).elementAt(0);
            int cantidad = (Integer) ((Vector) v).elementAt(3);
            this.productoYcantidad.put(idProdV, cantidad);
            precioTotal += precioXCantidad(idProdV, cantidad);
        }
        lb_precio.setText(String.valueOf(precioTotal));
    }

    private float precioXCantidad(Long idProdV, int cantidad) {
        producto p = (producto) this.productosEnVenta.get(idProdV);
        return p.getPrecio() * cantidad;

    }

    private void eliminarItemLista() {
        if (idProductoListaVenta != null) {
            if (JOptionPane.showConfirmDialog(this, "Desea remover el producto: " + idProductoListaVenta.toString() + " de la lista de compra?") == 0) {
                int fila = getPosicionProdLista(idProductoListaVenta);
                eliminarFila(fila);
                this.productosEnVenta.remove(idProductoListaVenta);
                JOptionPane.showMessageDialog(this, "Se elimino de la lista!");
                calcularPrecioTotal();
                idProductoListaVenta = null;
            } else {
                idProductoListaVenta = null;
            }
        }
    }

    public void cargarProductosDisponibles() {
        List<producto> productosDisp = (List<producto>) ICV.getProductosDisponibles();
        String[] cabecera = {"ID Producto", "Nombre", "Precio", "Stock actual"};
        DefaultTableModel modeloNuevo = new DefaultTableModel(cabecera, 0);
        if (productosDisp.size() > 0) {
            llenarDiccProductos(productosDisp);

            for (producto p : productosDisp) {
                Object[] data = {p.getCodigo(), p.getNombre(), p.getPrecio(), p.getCantidad()};
                modeloNuevo.addRow(data);
            }
            jtabla_productos.setModel(modeloNuevo);
            jtabla_productos.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "No ha productos disponibles!");
            jtabla_productos.setModel(modeloNuevo);
            jtabla_productos.setEnabled(false);
        }

    }

    private void llenarDiccProductos(List<producto> productosDisp) {
        productosDisponibles = new HashMap<>();
        for (producto p : productosDisp) {
            productosDisponibles.put(p.getCodigo(), p);
        }
    }

    private producto getProducto(long id) {
        return (producto) this.productosDisponibles.get(id);
    }

    /*
    nota: cuando se piden los productos en la web setearle el proveedor
    funncion controla stock ventas diponible = true o false
     */
    private boolean estaEnEstaPosicion(Vector elementoVector, long id) {
        return ((Long) elementoVector.elementAt(0)).equals(id);
    }

    private void vender() {
        if (JOptionPane.showConfirmDialog(this, "Desea proceder con la compra?") == 0) {
            jtabla_productos.setEnabled(false);
            if (JCB_Cliente.getSelectedIndex() != 0) {
                if (validarCantidades()) {
                    venta ven = crearVenta();
                    if (ICV.agregarVenta(ven)) {
                        JOptionPane.showMessageDialog(this, "Se registro una nueva venta!");
                        ICV.controlarStock(productoYcantidad);//con esto controlo el stock
                        limpiar();
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "Ocurrio un error al dar de alta la venta!");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente!");
                JCB_Cliente.requestFocus();
            }

        }
    }

    private boolean validarCantidades() {
        DefaultTableModel modelo = (DefaultTableModel) jtabla_productosVenta.getModel();
        Vector datosVector = modelo.getDataVector();
        for (Object v : datosVector) {
            int cant = (Integer) ((Vector) v).elementAt(3);
            Long idP = (Long) ((Vector) v).elementAt(0);
            if (cant <= 0 && cantidadMinima(idP, cant)) {
                JOptionPane.showMessageDialog(this, "Las cantidades de los productos no pueden superar el Stock actual o ser cero, revise!");
                jtabla_productosVenta.requestFocus();
                return false;
            }
        }
        return true;
    }

    private venta crearVenta() {
        venta nuevaVenta = new venta();
        nuevaVenta.setCliente(this.clientes.get((String) JCB_Cliente.getSelectedItem()));
        nuevaVenta.setFecha(util.getFechaActual());
        nuevaVenta.setDetalles(armarDetalleVenta());
        return nuevaVenta;
    }

    private void limpiar() {
        reiniciarTablaProdVenta();
        cargarProductosDisponibles();
        JCB_Cliente.setSelectedIndex(0);
        this.productosEnVenta.clear();
    }

    private detalleVenta armarDetalle(producto p, int cant) {
        detalleVenta nuevoDetalle = new detalleVenta();
        nuevoDetalle.setProducto(p);
        nuevoDetalle.setCantidad(cant);
        return nuevoDetalle;
    }

    private List<detalleVenta> armarDetalleVenta() {
        List<detalleVenta> detalles = new ArrayList<>();
        for (Long id : this.productoYcantidad.keySet()) {
            producto p = (producto) this.productosEnVenta.get(id);
            detalles.add((detalleVenta) armarDetalle(p, this.productoYcantidad.get(id)));
        }
        return detalles;
    }

    private boolean cantidadMinima(Long idP, int cant) {
        return getProducto(idP).getCantidad() >= cant;
    }

}
