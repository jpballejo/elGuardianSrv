/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Logica.ControladorReservas;
import Logica.banio;
import Logica.cliente;
import Logica.controladorCliente;
import Logica.controladorServicios;
import Logica.esquila;
import Logica.mascota;
import Logica.paseo;
import Logica.reserva;
import Logica.servicio;
import Logica.tipoBanio;
import Logica.tipoEsquila;
import Logica.turno;
import Logica.utilidades;
import java.awt.Image;
import java.awt.event.ItemListener;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Filter;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jp
 */
public class JIF_modificarReserva extends javax.swing.JInternalFrame {

    private final JDesktopPane escritorio;
    private final long idReserva;
    private Long idMascota;
    private controladorCliente contC = controladorCliente.getInstance();
    private ControladorReservas contRes = ControladorReservas.getInstance();
    private utilidades util = utilidades.getInstance();
    private cliente cliente = null;
    private List<mascota> mascotasCli = null;
    private mascota mascotaCliente = null;
    List<turno> turnosDisponibles = new ArrayList<>();
    private List<String> serviciosLista = new ArrayList<>();
    private controladorServicios contSrv = controladorServicios.getInstance();
    ArrayList<Object> listaBanios = new ArrayList<>();
    ArrayList<Object> listaEsquilas = new ArrayList<>();
    private HashMap<String, servicio> listaServicios = new HashMap<>();
    private String idCliente;
    private JComboBox<String> modeloCombo;

    /**
     * Creates new form JIF_modificarReserva
     */
    public JIF_modificarReserva(JDesktopPane escritorioViene, long idReserva) {
        this.escritorio = escritorioViene;
        this.idReserva = 2;
        initComponents();
        inicio();
    }

    public cliente getCliente() {
        return cliente;
    }

    public void setCliente(cliente cliente) {
        this.cliente = cliente;
    }

    public JComboBox<String> getModeloCombo() {
        return modeloCombo;
    }

    public void setModeloCombo(JComboBox<String> modeloCombo) {
        this.modeloCombo = modeloCombo;
    }

    private void inicio() {
        jtxt_descripcion.setText("");
        DefaultListModel limpio = new DefaultListModel();
        jList_Tipo.setModel(limpio);
        jList_servicio.setModel(limpio);
        SpinnerModel nnmodel = new SpinnerNumberModel(0, 0, 5, 1);//creo un modelo con los numeros
        jSpinnerDuracion.setModel(nnmodel);
        JSpinner.DefaultEditor defaultEditor = new JSpinner.DefaultEditor(new JSpinner(nnmodel));
        jSpinnerDuracion.setEditor(defaultEditor);
        jSpinnerDuracion.setEditor(new JSpinner.DefaultEditor(new JSpinner(nnmodel)));//seteo un editor con mi modelo, esto es para que no pueda editar
        //      cargarTurnosDisponibles();//carga los turnos
        cargarServiciosList();//carga los servicios la lista
        contSrv.cargarTiposServicios();//carga los tipos de servicios
        cargarReserva();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jlabClientes = new javax.swing.JLabel();
        Jlab_foto = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLab_idMascota = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabla_mascotas = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList_servicio = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList_Tipo = new javax.swing.JList<>();
        btn_nuevoTipo = new javax.swing.JButton();
        jSpinnerDuracion = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabTurnos = new javax.swing.JLabel();
        btn_cancelar = new javax.swing.JButton();
        btn_aceptar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtxt_descripcion = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jCombo_Turnos = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabIdCliente = new javax.swing.JLabel();

        jlabClientes.setText("Cliente:");

        Jlab_foto.setText("Foto");

        jLabel1.setText("Mascota");

        jLab_idMascota.setText("id");

        jTabla_mascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTabla_mascotas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabla_mascotasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTabla_mascotas);

        jList_servicio.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList_servicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList_servicioMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList_servicio);

        jLabel5.setText("Servicio");

        jLabel6.setText("Tipo");

        jList_Tipo.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jList_Tipo);

        btn_nuevoTipo.setText("Nuevo Tipo");
        btn_nuevoTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_nuevoTipoActionPerformed(evt);
            }
        });

        jLabel7.setText("Duracion");

        jLabTurnos.setText("Turno/s");

        btn_cancelar.setText("Cancelar");
        btn_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelarActionPerformed(evt);
            }
        });

        btn_aceptar.setText("Aceptar");
        btn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_aceptarActionPerformed(evt);
            }
        });

        jtxt_descripcion.setColumns(20);
        jtxt_descripcion.setRows(5);
        jScrollPane3.setViewportView(jtxt_descripcion);

        jLabel3.setText("Descripcion");

        jCombo_Turnos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Turno");

        jLabIdCliente.setText("idCliente");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jCombo_Turnos, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane5)
                            .addComponent(btn_nuevoTipo, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jSpinnerDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabTurnos)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_aceptar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                                .addComponent(btn_cancelar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabIdCliente)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLab_idMascota))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Jlab_foto, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(65, 65, 65))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jlabClientes)
                    .addContainerGap(870, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabIdCliente))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLab_idMascota)
                                    .addComponent(jLabel1))))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(Jlab_foto, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jCombo_Turnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jSpinnerDuracion, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabTurnos))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btn_nuevoTipo)
                                    .addComponent(btn_aceptar)
                                    .addComponent(btn_cancelar))))))
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(26, 26, 26)
                    .addComponent(jlabClientes)
                    .addContainerGap(473, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabla_mascotasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabla_mascotasMouseClicked
        int row = jTabla_mascotas.rowAtPoint(evt.getPoint());
        // this.seleccionarMascota((Long) jTabla_mascotas.getValueAt(row, 0));
        this.idMascota = (Long) jTabla_mascotas.getValueAt(row, 0);
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabla_mascotasMouseClicked

    private void jList_servicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList_servicioMouseClicked
        cargarListTipoSrv(jList_servicio.getSelectedValue());           //  cargarListTipoSrv(jList_servicio.getSelectedValue());        // TODO add your handling code here:
    }//GEN-LAST:event_jList_servicioMouseClicked

    private void btn_nuevoTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_nuevoTipoActionPerformed
        JIF_esquilaBaño esqBan = new JIF_esquilaBaño(this.escritorio);
        this.escritorio.add(esqBan);
        esqBan.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_nuevoTipoActionPerformed

    private void btn_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelarActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btn_cancelarActionPerformed

    private void btn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_aceptarActionPerformed
        int res = JOptionPane.showConfirmDialog(this, "Desea reservar un turno?");
        if (res == 0) {
            // crearReserva();

        }
    }//GEN-LAST:event_btn_aceptarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jlab_foto;
    private javax.swing.JButton btn_aceptar;
    private javax.swing.JButton btn_cancelar;
    private javax.swing.JButton btn_nuevoTipo;
    private javax.swing.JComboBox<String> jCombo_Turnos;
    private javax.swing.JLabel jLabIdCliente;
    private javax.swing.JLabel jLabTurnos;
    private javax.swing.JLabel jLab_idMascota;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList_Tipo;
    private javax.swing.JList<String> jList_servicio;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinnerDuracion;
    private javax.swing.JTable jTabla_mascotas;
    private javax.swing.JLabel jlabClientes;
    private javax.swing.JTextArea jtxt_descripcion;
    // End of variables declaration//GEN-END:variables

    /////////////////////////////////////////////////////funnciones///////////////////////////////////////////
    private void cargarReserva() {
        reserva r = (reserva) contRes.getReserva(this.idReserva);
        this.cliente = (cliente) r.getCliente();
        cargarMascotasCliente(this.cliente.getMascotasCliente());
        jLabIdCliente.setText((String) r.getCliente().getCorreo());
        jtxt_descripcion.setText(r.getDescripcion());
        this.mascotaCliente = (mascota) r.getMascota();

        cargarTurnosDisponibles((turno) r.getTurno());
        cargarServicioCliente(r.getServicio());

    }

    private void cargarMascotasCliente(List<mascota> mascotasCliente) {
        if (!mascotasCliente.isEmpty()) {
            // String[] cabeceras = util.cabeceras(mascotasCliente.get(0));
            String[] filtro = {"Cliente"};
            List<String> cabeceras = util.filtrarPalabras((String[]) util.cabeceras(mascotasCliente.get(0)), filtro);
            DefaultTableModel dtm = new DefaultTableModel(cabeceras.toArray(), 0);
            for (mascota m : mascotasCliente) {
                Object[] data = {m.getId(), m.getNombre(), m.getRaza().getRaza(), m.getDescripcion()};
                dtm.addRow(data);
            }
            jTabla_mascotas.setModel(dtm);
        } else {
            jTabla_mascotas.setEnabled(false);
        }
    }

    private void cargarServicio(servicio servicio) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void cargarTurnosDisponibles(turno turnoCliente) {
        this.turnosDisponibles = (ArrayList<turno>) getTurnosSumaEldelCLiente((ArrayList<turno>) contRes.getTurnos(), turnoCliente);
        int numTurno = 1;
        JComboBox<String> comboTurnos = new JComboBox<>();
        comboTurnos.addItem("Seleccionar Turno");
        for (turno turnoDisponible : turnosDisponibles) {
            comboTurnos.addItem("Turno: " + numTurno + " -- " + turnoDisponible.getHora() + " Hs");
            if (turnoCliente.equals(turnoDisponible)) {
                comboTurnos.setSelectedItem("Turno: " + numTurno + " -- " + turnoDisponible.getHora() + " Hs");
            }
            numTurno++;

        }
        jCombo_Turnos.setModel(comboTurnos.getModel());
        this.modeloCombo = comboTurnos;

    }

    private ArrayList<turno> getTurnosSumaEldelCLiente(ArrayList<turno> turnos, turno turnoClie) {
        ArrayList<turno> ListTurnos = new ArrayList<>();

        if (turnos.size() > 0) {
            if (!contieneTurno(turnoClie, turnos)) {

                ListTurnos.addAll(agregaTurnoEnOrden(turnos, turnoClie));
            }
            ListTurnos.addAll(turnos);
        }

        return ListTurnos;
    }

    private ArrayList<turno> agregaTurnoEnOrden(ArrayList<turno> turnos, turno turnoClie) {
        try {

            Iterator it = turnos.iterator();

            while (it.hasNext()) {
                turno tur = (turno) it.next();
                int horaTL = parsearHora(tur.getHora());
                int horaTC = parsearHora(turnoClie.getHora());
                if (horaTL > horaTC) {
                    int indice = turnos.indexOf(it.next());
                    turnos.add(indice - 1, tur);
                }
            }
        } catch (Exception e) {

            System.err.print("Error: " + e.getMessage() + "CAUSA:" + e.getCause());
        }

        return turnos;
    }

    /**
     * Funcioon que valida la exsitencia de un turno en el arreglo de turnos en
     * caso que el arreglo este vacio o no existe el turno retorna false
     *
     * @param turnClie
     * @param turnosSis
     * @return true or false
     */
    private boolean contieneTurno(turno turnClie, ArrayList<turno> turnosSis) {
        if (!turnosSis.isEmpty()) {
            for (turno tur : turnosSis) {
                if (tur.getHora().equals(turnClie.getHora())) {
                    return true;
                }

            }

        }
        return false;
    }

    private String obtenerHora(String valorCombo) {
        String[] corte1 = valorCombo.split(" -- ");
        String[] corteFInal = corte1[1].split(" ");
        return corteFInal[0];

    }

    private int parsearHora(String cadena) {
        String[] split = cadena.split(":");
        return Integer.parseInt(split[0]);
    }

    private void cargarServiciosList() {
        DefaultListModel modeloListaSer = (DefaultListModel) new DefaultListModel();
        modeloListaSer.addElement("Baño");
        modeloListaSer.addElement("Esquila");
        modeloListaSer.addElement("Paseo");
        jList_servicio.setModel(modeloListaSer);
    }

    private void cargarListTipoSrv(String selectedValue) {
        if (selectedValue.equals("Baño")) {
            //    if ((List) contSrv.getServiciosXtipo("BANIO") != null) {
            listaBanios = (ArrayList<Object>) contSrv.getServiciosXtipo("BANIO");
            modeloBanio(listaBanios);
            //   }

        }
        if (selectedValue.equals("Esquila")) {
            //if ((List) contSrv.getServiciosXtipo("ESQUILA") != null) {
            listaEsquilas = (ArrayList<Object>) contSrv.getServiciosXtipo("ESQUILA");
            modeloEsquila(listaEsquilas);
            //   }
        }

        if (selectedValue.equals("Paseo")) {
            DefaultListModel dflmd = new DefaultListModel();
            dflmd.addElement("Paseo");
            jList_Tipo.setModel(dflmd);
        }
    }

    private void modeloEsquila(List listOBJ) {
        DefaultListModel newModel = new DefaultListModel();
        if (listOBJ != null) {

            for (Object obj : listOBJ) {
                newModel.addElement(((tipoEsquila) obj).getTipoEsquila());
            }
            jList_Tipo.setModel(newModel);
        } else {
            newModel.addElement("N/A tipoEsquila");
            jList_Tipo.setModel(newModel);
        }
    }

    private void modeloBanio(List listOBJ) {
        DefaultListModel newModel = new DefaultListModel();
        if (listOBJ != null) {

            for (Object obj : listOBJ) {
                newModel.addElement(((tipoBanio) obj).getTipoBanio());
            }
            jList_Tipo.setModel(newModel);
        } else {
            newModel.addElement("N/A tipoBaño");
            jList_Tipo.setModel(newModel);
        }

    }

    private void cargarServicioCliente(servicio servicio) {
        try {

            if (servicio.getTipoServicio() instanceof banio) {
                jList_servicio.setSelectedValue("Baño", false);
                banio ban = (banio) servicio.getTipoServicio();
                jList_Tipo.setSelectedValue(ban.getTipoDeBanio().getTipoBanio(), false);

            }
            if (servicio.getTipoServicio() instanceof esquila) {
                jList_servicio.setSelectedValue("Esquila", false);
                esquila esq = (esquila) servicio.getTipoServicio();
                jList_Tipo.setSelectedValue(esq.getTipoDeEsquila().getTipoEsquila(), false);

            }
            if (servicio.getTipoServicio() instanceof paseo) {
                jList_servicio.setSelectedValue("Paseo", false);
                jList_Tipo.setSelectedValue("Paseo", false);
            }

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage() + " Causa: " + e.getCause());
        }

    }
}
